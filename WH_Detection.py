# -*- coding: utf-8 -*-
"""
/***************************************************************************
 WHDetection
                                 A QGIS plugin
 This plugin allows the detection of Water Hyacinth plants through vegetation indices and remote sensing images.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-09-21
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Luís Pádua and Lia Duarte
        email                : liaduarte@fc.up.pt
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QFileInfo
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QListWidget, QFileDialog, QMessageBox, QWidget

from qgis.PyQt.QtCore import *
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtWidgets import *
from qgis.core import QgsProcessingUtils, QgsRasterLayer, QgsVectorLayer, QgsProject
from qgis.gui import *
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .WH_Detection_dialog import WHDetectionDialog
import os.path
from processing.core.Processing import Processing
from .multiple_select import Ui_Dialog
from osgeo import gdal
import glob, os


class WHDetection:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'WHDetection_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&QIASdetection')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.window = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('WHDetection', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/WH_Detection/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'This plugin allows the detection of invasive species in aquatic ecosystems.'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&QWHDetection'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = WHDetectionDialog()
            self.dlg.pushButton.clicked.connect(self.fillRed)
            self.dlg.pushButton_2.clicked.connect(self.fillNIR)
            self.dlg.pushButton_6.clicked.connect(self.fillStudy_zone)
            self.dlg.pushButton_4.clicked.connect(self.fillOutput)
            #self.dlg.pushButton_5.clicked.connect(self.fillStats)
            self.dlg.pushButton_3.clicked.connect(self.layers)

            self.dlg.pushButton_7.clicked.connect(self.conclude)
            self.dlg.pushButton_8.clicked.connect(self.close_window)

            # Get all loaded layers in the interface
            layers = QgsProject.instance().mapLayers()

            # Create an empty list which we can populate
            list_names_layers = []
            # list of layer names using list comprehension
            l = [layer.name() for layer in QgsProject.instance().mapLayers().values()]
            # dictionary with key = layer name and value = layer object
            layers_list = {}
            for l in QgsProject.instance().mapLayers().values():
                layers_list[l.name()] = l
            for name, value in layers_list.items():
                list_names_layers.append(name)

            self.dlg.comboBox.addItems(list_names_layers)
            self.dlg.comboBox_2.addItems(list_names_layers)
            self.dlg.comboBox_4.addItems(list_names_layers)

            self.dlg.horizontalSlider.setRange(0, 100)
            self.dlg.horizontalSlider.setSingleStep(1)
            self.dlg.horizontalSlider.valueChanged.connect(self.valueHandler)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()

    def valueHandler(self, value):
        scaledValue = float(value) / 100  # type of "value" is int so you need to convert it to float in order to get float type for "scaledValue"
        scaledValue, type(scaledValue)
        self.dlg.label_10.setText(str(scaledValue))
        #QMessageBox.about(self.dlg, 'teste', str(scaledValue))

    def layers(self):
        if self.window is None:
            self.window = Window()

        self.window.listWidget.clear()
        self.window.show()

        self.window.listWidget.setSelectionMode(QListWidget.ExtendedSelection)

        # Get all loaded layers in the interface
        layers = QgsProject.instance().mapLayers()


        # Create an empty list which we can populate
        list_names_layers = []
        # list of layer names using list comprehension and absolute path
        l = [layer.source() for layer in QgsProject.instance().mapLayers().values()]
        # dictionary with key = layer name and value = layer object
        layers_list = {}
        for l in QgsProject.instance().mapLayers().values():
            layers_list[l.name()] = l
            fileInfo = QFileInfo(l.name())
            baseName = fileInfo.baseName()

        #extract the folder of the layers
        directory_full = l.source()
        self.directory = os.path.dirname(os.path.abspath(directory_full))

        for name, value in layers_list.items():
            list_names_layers.append(name)

        self.window.listWidget.addItems(list_names_layers)

        self.window.pushButton.clicked.connect(self.selectAll)
        self.window.pushButton_2.clicked.connect(self.clear)
        self.window.pushButton_3.clicked.connect(self.addFiles)
        self.window.pushButton_4.clicked.connect(self.getLayers)
        self.window.pushButton_6.clicked.connect(self.removeFile)
        self.window.pushButton_5.clicked.connect(self.cancel)

    def removeFile(self):
        for SelectedItem in self.window.listWidget.selectedItems():
            self.window.listWidget.takeItem(self.window.listWidget.row(SelectedItem))

    def selectAll(self):
        self.window.listWidget.selectAll()

    def clear(self):
        self.window.listWidget.clearSelection()

    def addFiles(self):
        filename, filter_string = QFileDialog.getOpenFileName(self.dlg, "Select Red band ", "", '*.tif')
        fileCI = str(filename)

        fileInfo = QFileInfo(fileCI)
        path = fileInfo.filePath()
        basename = fileInfo.baseName()

        # add the raster
        vlayer = QgsRasterLayer(path, basename)
        self.window.listWidget.addItem(str(filename))

    def getLayers(self):
        inds = [i.text() for i in self.window.listWidget.selectedItems()]
        #QMessageBox.about(self.window,'teste', str(inds))
        len_select = len(inds)
        self.dlg.lineEdit_3.setText(str(len_select)+ ' NDVI maps selected')
        self.window.close()

    def cancel(self):
        self.window.close()

    def conclude(self):

        input_Red = self.dlg.comboBox.currentText()
        input_NIR = self.dlg.comboBox_2.currentText()
        study_zone = self.dlg.comboBox_4.currentText()

        self.output_directory = self.dlg.lineEdit.text()


        if self.dlg.radioButton_3.isChecked():
            self.out = str(self.output_directory) + '/ndvi_map.tif'
            self.outClass = str(self.output_directory)+'/ndvi_area.shp'
            clip_red = Processing.runAlgorithm("gdal:cliprasterbymasklayer", {
                'INPUT': str(input_Red),
                'MASK': study_zone,
                'SOURCE_CRS': None,
                'TARGET_CRS': None, 'NODATA': None,
                'ALPHA_BAND': False, 'CROP_TO_CUTLINE': True, 'KEEP_RESOLUTION': False,
                'SET_RESOLUTION': False, 'X_RESOLUTION': None, 'Y_RESOLUTION': None,
                'MULTITHREADING': False, 'OPTIONS': '', 'DATA_TYPE': 0, 'EXTRA': '',
                'OUTPUT': QgsProcessingUtils.generateTempFilename('clip_red.tif')})
            self.out_red = clip_red['OUTPUT']

            clip_nir = Processing.runAlgorithm("gdal:cliprasterbymasklayer", {
                'INPUT': str(input_NIR),
                'MASK': study_zone,
                'SOURCE_CRS': None,
                'TARGET_CRS': None, 'NODATA': None,
                'ALPHA_BAND': False, 'CROP_TO_CUTLINE': True, 'KEEP_RESOLUTION': False,
                'SET_RESOLUTION': False, 'X_RESOLUTION': None, 'Y_RESOLUTION': None,
                'MULTITHREADING': False, 'OPTIONS': '', 'DATA_TYPE': 0, 'EXTRA': '',
                'OUTPUT': QgsProcessingUtils.generateTempFilename('clip_nir.tif')})
            self.out_nir = clip_nir['OUTPUT']

            ndvi_estimated = Processing.runAlgorithm("grass7:r.mapcalc.simple",
                                                {'a': self.out_red,
                                                 'b': self.out_nir,
                                                 'c': None, 'd': None, 'e': None, 'f': None,
                                                 'expression': '((B-A)/(B+A))',
                                                 'output': QgsProcessingUtils.generateTempFilename('ndvi_estimated.tif'), 'GRASS_REGION_PARAMETER': None,
                                                 'GRASS_REGION_CELLSIZE_PARAMETER': 0,
                                                 'GRASS_RASTER_FORMAT_OPT': '',
                                                 'GRASS_RASTER_FORMAT_META': ''})
            self.out_ndvi_estimated = ndvi_estimated['output']

            if self.dlg.radioButton.isChecked():
                value_maximum = float(self.dlg.label_10.text())
                ndvi_value_less = Processing.runAlgorithm("grass7:r.mapcalc.simple", {
                    'a': str(self.out_ndvi_estimated),
                    'b': None, 'c': None, 'd': None, 'e': None, 'f': None, 'expression': 'A>' + str(value_maximum),
                    'output': QgsProcessingUtils.generateTempFilename('ndvi_value_less.tif'), 'GRASS_REGION_PARAMETER': None, 'GRASS_REGION_CELLSIZE_PARAMETER': 0,
                    'GRASS_RASTER_FORMAT_OPT': '', 'GRASS_RASTER_FORMAT_META': ''})
                self.out_ndvi_value_less = ndvi_value_less['output']

                #convert zero values to nodata
                Processing.runAlgorithm("gdal:rastercalculator",
                               {'INPUT_A': str(self.out_ndvi_value_less), 'BAND_A': 1, 'INPUT_B': None,
                                'BAND_B': None, 'INPUT_C': None, 'BAND_C': None, 'INPUT_D': None, 'BAND_D': None,
                                'INPUT_E': None, 'BAND_E': None, 'INPUT_F': None, 'BAND_F': None, 'FORMULA': 'A*1',
                                'NO_DATA': 0, 'RTYPE': 5, 'OPTIONS': '', 'EXTRA': '', 'OUTPUT': str(self.out)})

            if self.dlg.radioButton_2.isChecked():
                minimum = self.dlg.doubleSpinBox.value()
                maximum = self.dlg.doubleSpinBox_2.value()
                ndvi_value_final= Processing.runAlgorithm("grass7:r.mapcalc.simple", {
                    'a': str(self.out_ndvi_estimated),
                    'b': None, 'c': None, 'd': None, 'e': None, 'f': None, 'expression': 'A>' + str(minimum) + ' & A<' + str(maximum),
                    'output': QgsProcessingUtils.generateTempFilename('ndvi_value_final.tif'), 'GRASS_REGION_PARAMETER': None, 'GRASS_REGION_CELLSIZE_PARAMETER': 0,
                    'GRASS_RASTER_FORMAT_OPT': '', 'GRASS_RASTER_FORMAT_META': ''})
                self.out_ndvi_value_final = ndvi_value_final['output']

                Processing.runAlgorithm("gdal:rastercalculator",
                               {'INPUT_A': str(self.out_ndvi_value_final), 'BAND_A': 1, 'INPUT_B': None,
                                'BAND_B': None, 'INPUT_C': None, 'BAND_C': None, 'INPUT_D': None, 'BAND_D': None,
                                'INPUT_E': None, 'BAND_E': None, 'INPUT_F': None, 'BAND_F': None, 'FORMULA': 'A*1',
                                'NO_DATA': 0, 'RTYPE': 5, 'OPTIONS': '', 'EXTRA': '', 'OUTPUT': str(self.out)})

            # Statistics
            out_stats_area = Processing.runAlgorithm("native:zonalstatisticsfb", {'INPUT':str(study_zone),'INPUT_RASTER':str(self.out),'RASTER_BAND':1,'COLUMN_PREFIX':'_','STATISTICS':[0,1],'OUTPUT':QgsProcessingUtils.generateTempFilename('out_stats.shp')})
            self.out_stats = out_stats_area['OUTPUT']

            #get pixel area
            raster = gdal.Open(str(self.out))
            geo = raster.GetGeoTransform()
            pixelSize = geo[1]

            Processing.runAlgorithm("native:fieldcalculator",
                                    {'INPUT': str(self.out_stats), 'FIELD_NAME': 'Area_estimated',
                                     'FIELD_TYPE': 0, 'FIELD_LENGTH': 10, 'FIELD_PRECISION': 3,
                                     'FORMULA': '\"_sum\" *' + str(pixelSize) + '*' + str(pixelSize),
                                     'OUTPUT': str(self.outClass)})

            # add result into canvas
            final_map_raster = QFileInfo(str(self.out))
            rlayer_vigour = QgsRasterLayer(str(self.out), final_map_raster.fileName(),
                                           'gdal')
            QgsProject.instance().addMapLayer(rlayer_vigour)
            final_map_vector = QFileInfo(str(self.outClass))
            vlayer_vigour = QgsVectorLayer(str(self.outClass), final_map_vector.fileName(),
                                           'ogr')
            QgsProject.instance().addMapLayer(vlayer_vigour)


        if self.dlg.radioButton_4.isChecked():
            selected_files = [i.text() for i in self.window.listWidget.selectedItems()]
            os.chdir(self.directory)  # Sets the current directory to your rasterfilepath
            for lyr in selected_files:
                self.out_2 = str(self.output_directory) + '/ndvi_map_' + str(lyr) + '.tif'
                self.outClass_2 = str(self.output_directory) + '/ndvi_area_' + str(lyr) + '.shp'
                clip_ndvi = Processing.runAlgorithm("gdal:cliprasterbymasklayer", {
                    'INPUT': str(lyr),
                    'MASK': study_zone,
                    'SOURCE_CRS': None,
                    'TARGET_CRS': None, 'NODATA': None,
                    'ALPHA_BAND': False, 'CROP_TO_CUTLINE': True, 'KEEP_RESOLUTION': False,
                    'SET_RESOLUTION': False, 'X_RESOLUTION': None, 'Y_RESOLUTION': None,
                    'MULTITHREADING': False, 'OPTIONS': '', 'DATA_TYPE': 0, 'EXTRA': '',
                    'OUTPUT': QgsProcessingUtils.generateTempFilename('clip_ndvi.tif')})
                self.out_ndvi = clip_ndvi['OUTPUT']

                if self.dlg.radioButton.isChecked():
                    value_maximum = float(self.dlg.label_10.text())
                    ndvi_value_less = Processing.runAlgorithm("grass7:r.mapcalc.simple", {
                        'a': str(self.out_ndvi),
                        'b': None, 'c': None, 'd': None, 'e': None, 'f': None, 'expression': 'A>' + str(value_maximum),
                        'output': QgsProcessingUtils.generateTempFilename('ndvi_value_less.tif'), 'GRASS_REGION_PARAMETER': None, 'GRASS_REGION_CELLSIZE_PARAMETER': 0,
                        'GRASS_RASTER_FORMAT_OPT': '', 'GRASS_RASTER_FORMAT_META': ''})
                    self.out_ndvi_value_less = ndvi_value_less['output']

                    # convert zero values to nodata
                    Processing.runAlgorithm("gdal:rastercalculator",
                                            {'INPUT_A': str(self.out_ndvi_value_less), 'BAND_A': 1, 'INPUT_B': None,
                                             'BAND_B': None, 'INPUT_C': None, 'BAND_C': None, 'INPUT_D': None,
                                             'BAND_D': None,
                                             'INPUT_E': None, 'BAND_E': None, 'INPUT_F': None, 'BAND_F': None,
                                             'FORMULA': 'A*1',
                                             'NO_DATA': 0, 'RTYPE': 5, 'OPTIONS': '', 'EXTRA': '',
                                             'OUTPUT': str(self.out_2)})

                if self.dlg.radioButton_2.isChecked():
                    minimum = self.dlg.doubleSpinBox.value()
                    maximum = self.dlg.doubleSpinBox_2.value()
                    ndvi_value_final= Processing.runAlgorithm("grass7:r.mapcalc.simple", {
                        'a': str(self.out_ndvi),
                        'b': None, 'c': None, 'd': None, 'e': None, 'f': None, 'expression': 'A>' + str(minimum) + ' & A<' + str(maximum),
                        'output': QgsProcessingUtils.generateTempFilename('ndvi_value_final.tif'), 'GRASS_REGION_PARAMETER': None, 'GRASS_REGION_CELLSIZE_PARAMETER': 0,
                        'GRASS_RASTER_FORMAT_OPT': '', 'GRASS_RASTER_FORMAT_META': ''})
                    self.out_ndvi_value_final = ndvi_value_final['output']

                    Processing.runAlgorithm("gdal:rastercalculator",
                                            {'INPUT_A': str(self.out_ndvi_value_final), 'BAND_A': 1, 'INPUT_B': None,
                                             'BAND_B': None, 'INPUT_C': None, 'BAND_C': None, 'INPUT_D': None,
                                             'BAND_D': None,
                                             'INPUT_E': None, 'BAND_E': None, 'INPUT_F': None, 'BAND_F': None,
                                             'FORMULA': 'A*1',
                                             'NO_DATA': 0, 'RTYPE': 5, 'OPTIONS': '', 'EXTRA': '',
                                             'OUTPUT': str(self.out_2)})

                # Statistics
                out_stats_area = Processing.runAlgorithm("native:zonalstatisticsfb", {'INPUT': str(study_zone),
                                                                                      'INPUT_RASTER': str(
                                                                                          self.out_2),
                                                                                      'RASTER_BAND': 1,
                                                                                      'COLUMN_PREFIX': '_',
                                                                                      'STATISTICS': [0, 1],
                                                                                      'OUTPUT': QgsProcessingUtils.generateTempFilename(
                                                                                          'out_stats.shp')})
                self.out_stats = out_stats_area['OUTPUT']

                # get pixel area
                raster = gdal.Open(str(self.out_2))
                geo = raster.GetGeoTransform()
                pixelSize = geo[1]



                Processing.runAlgorithm("native:fieldcalculator",
                                        {'INPUT': str(self.out_stats), 'FIELD_NAME': 'Area_estimated',
                                         'FIELD_TYPE': 0, 'FIELD_LENGTH': 10, 'FIELD_PRECISION': 3,
                                         'FORMULA': '\"_sum\" *' + str(pixelSize) + '*' + str(pixelSize),
                                         'OUTPUT': str(self.outClass_2)})

                # add result into canvas
                final_map_raster = QFileInfo(str(self.out_2))
                rlayer_vigour = QgsRasterLayer(str(self.out_2), final_map_raster.fileName(),
                                               'gdal')
                QgsProject.instance().addMapLayer(rlayer_vigour)
                final_map_vector = QFileInfo(str(self.outClass_2))
                vlayer_vigour = QgsVectorLayer(str(self.outClass_2), final_map_vector.fileName(),
                                               'ogr')
                QgsProject.instance().addMapLayer(vlayer_vigour)

        QMessageBox.about(self.dlg, "Message", "Final maps are created!")

    def fillRed(self):
        filename, filter_string = QFileDialog.getOpenFileName(self.dlg, "Select Red band ", "", '*.tif')
        fileCI = str(filename)

        fileInfo = QFileInfo(fileCI)
        path = fileInfo.filePath()
        basename = fileInfo.baseName()

        # add the raster
        vlayer = QgsRasterLayer(path, basename)
        self.dlg.comboBox.addItem(filename)

    def fillNIR(self):
        filename, filter_string = QFileDialog.getOpenFileName(self.dlg, "Select NIR band ", "", '*.tif')
        fileCI = str(filename)

        fileInfo = QFileInfo(fileCI)
        path = fileInfo.filePath()
        basename = fileInfo.baseName()

        # add the raster
        vlayer = QgsRasterLayer(path, basename)
        self.dlg.comboBox_2.addItem(filename)

    def fillStudy_zone(self):
        filename, filter_string = QFileDialog.getOpenFileName(self.dlg, "Select Study zone ", "", '*.shp')
        fileCI = str(filename)

        fileInfo = QFileInfo(fileCI)
        path = fileInfo.filePath()
        basename = fileInfo.baseName()

        vlayer = QgsVectorLayer(path, basename)
        self.dlg.comboBox_4.addItem(filename)

    def fillOutput(self):
        filename = QFileDialog.getExistingDirectory(self.dlg, 'Select an awesome directory')
        self.dlg.lineEdit.setText(filename)

    def close_window(self):
        self.dlg.close()


class Window(QWidget, Ui_Dialog):
    def __init__(self, parent=None):
        QWidget.__init__(self, parent)
        self.setupUi(self)